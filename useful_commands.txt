#==========================================================
#
# Quick GUIDE for a distribbuted version control system for proper code management
# Author: lorenz-petra
#
# GIT  and GITHUB USEFUL commands / tips
#  https://github.com/joshnh/Git-Commands
#
# Oxford examples
# https://github.com/OxfordRSE/git-github-course
# 
# About the GIT BASH https://stackoverflow.com/questions/22310007/differences-between-git-scm-msysgit-git-for-windows
#
# OFFICIAL tutorial from GITHUB team
# https://guides.github.com/activities/hello-world/
#==========================================================


#============ FIRST some BASH ...
# Bash basics commands:

# shift + insert to copy or paste

#ctrl + C to get out of a dull terminal ...


print the current working directory (pwd)

navigate between directories on your computer (cd)

create new directories (mkdir)

print a list of files and subdirectories within directories (ls)

delete files (rm filename) and directories (rm -r directoryname)

N.B adding a -f flag allows to force in case you are not successful
copy files (cp) and directories (cp -r) to another directory

easily create new files using a single command (touch)


create  README.md file
#============

git --version

git --help

clear

git help init


# check current configuration 
git config --list


# amend some configuration parameters
git config --global user.name "lorenz-petra"
git config --global user.email "petralia.lorenzo@gmail.com"
git config --global core.editor "Nano"

( or better ... git config --global core.editor "\"c:\Program Files\Sublime Text 3\subl.exe\" -w -n" )

Sublimetext test.txt 
# you have to add both sublime text and python to the PATH variable to be able to use them from the GIT BASH


# If you are using Git Bash on Windows, you have to call Python via winpty:
winpty python

. /c/Anaconda3/etc/profile.d/conda.sh

# Otherwise simply use both sublimetext and python externally ... once happy with the edits, save, and go to GIT BASH and to the usual  add and  commit






#---------------------- INITIALIZE
mkdir newProj
cd newProj

# initialise an empty git repository in that folder newProj
git init (or git init .)

# create a file that we are going  to track later 
touch example.txt

# show the git directory
ls -A


# chec status - it tells you various info e.g. on which branch you are.. (virtual copies etc.)
git status

# check the history of the various commits
git log    (or concisely git log --oneline)

# check differences between files (if they have been added to the stagin area ...)
git diff



#---------------------- STAGING  
# it's a 2-stage or 2-step  process to go from local to staging area to shared repo
# (every time you want to "stage" the evolution of a file)




# to track status in the staging area, it tells git that this is the version of the file you want to care about - it effectively saves the local copy into the staging:
git add example.txt


# to commit the file and accompany with explanatory message ( -m flag)
git commit -m "Created test file example" 

# the machine will then tell you some messages with the version short identifiers. e.g.: cf4efdf
[master (root-commit) cf4efdf] Created index.md file
 1 file changed, 3 insertions(+)
 create mode 100644 index.md








# if you have done some mistake and want to go back to a certain version 
git reset


# for developping purposes ... to create more parallel versions ...
git branch


# to retrieve the most updated version from the shared on-line REPO
git checkout




# to quickly open (or create) a text file on notepad via bash

notepad example.txt     # you can also use nano ...



# what is HEAD
# it is a POINTER to the most recent commit and therefore can identify where your working version is.
# Tell me where HEAD is, so that I know where my currently working copy is based on.


# a WORKING TREE is clean if  there are no differences between the latest local version and the staging and the commited ones.




# to add various (previously added initialised) files to the staging area
# please add any files I have changed to the staging area
git add --update



# then you still need to commit  to the repo
git commit 



# make the staging working area look like the current local working area
git add .


# As a workflow enhancer to facilitate the various git add and git commit for various files ...
git commit -a -m "Lots of changes to various files"






# ----------------- DIFFS
git diff # by ddefault shows you differences that take you form between HEAD to current status

git diff will show us additions ("+") or removals ("-") of working copy local version (normally called b)  Vs the one in the REPO (normally called a).
 
(use the space-bar key to navigate through the diff output on the GIT Bash terminal)

Take also a look at the advanced command:
git diff --staged





# ---------------------- # ---------------------- 
#  VERSIONS of various commits
git checkout HEAD filename.txt      # access the latest commit version
git checkhout HEAD~1 filename.txt   #version of the penultimate commit







-------------------  MISTAKES
# reset to rewind (not recommended in team-work , where instead it's more ethical to proceed by fixing some amendements).

git reset filename.txt # to undo staged modifications


# revert a commit
git revert cf4efdf (where cf4efdf is the identifier like 
N.B that the revert action automatically is a commit

git revert --continue


# confilct markers










#----------------- PUSH & PULL

# establishing a connection with an online repo
# add a remote  - it's not a synchronization etc
git remote add origin https://github.com/lorenz-petra/FeNOgram.git
 
# we are telling git that that REPO exists out there in that location
and I am giving it the name origin.
The reason why "origin" it saves normally a bit of typing


# if you want to re-set the origin remote link:
 git remote set-url origin https://github.com/lorenz-petra/FeNOgram.git

# Notice that a remote does not establish any sync or notifications
# Always add .git to the link from the REPO you are referring to
# Once you sync you no longer need internet connections



git push -u origin master



# how to use SSH with GItHub for enhanced security



# fork to get your own copy from premitted repos (from GitHub)
# create a fork then do your own amendments to that copy than make a pull  request to the repo admin of your team






# If you wish to set tracking information for this branch you can do so with:

git branch --set-upstream-to=origin/<branch> master





# ----------------- CLONING, FORKS and BRANCHES
git clone https://github.com/lorenz-petra/FeNOgram.git

If you want to start clean by copying the content of that REPO


Note that a FORK  is a github CLONE of a repo






#---------------------- CONFLICTS 
# GIT cannot know the criterion to fix conflicts
# there is a 1st author wins ... it's up to the 2nd person to solve the conflicts ...
# they always need to pull the most updated version befor start any changes ...






















# ---------------------- # ---------------------- 
# ---------------------- WORKFLOW example
mkdir GIT_learning

 cd GIT_learning/

git init .

[ Create a README file and a code file via text editor...]
notepad MyStdPythonHeader.py
notepad README.md

git add README.md    # track it
git commit -m "What is the purpose of this"

git add MyStdPythonHeader.py
git commit -m "Just to add a quick python script"


git commit -a -m "Lazy global update and commit command - since all files have been previously added"


# establish a temporary connection from local to a online repo to tell where you are about to do a push or a pull from
git remote add origin https://github.com/lorenz-petra/Git_learn_repo.git


# send ot the online repo all your recent modificaiton to the local repo
git push -u origin master # it is now saved


# WARNING !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# You come back to work on a project....
# First check that there have not been any changes .. if yes, PULL those changes to your local machine prior to start editing the code !!!!

# Do some code changes in external python editor or Spyder IDE ...
# go back to Git Bash



# check the differences between the remote most updated version and your version
git diff


# check the version status (working tree clean?)
git status

git log --oneline
# to check the histories of commits and again making sure that before you commit n push, you have worked on the most updated version... otherwise again the first one wins, so the second ones have to figure out how to carefully fix it...(mereging the version etc.)


#  If everyhtin is OK, again commit n push ...
git commit -a -m "Lazy global update and commit command - since all files have been previously added"

git push -u origin master
# if fail, you might have to re-setablish the connection via the remote command:
git remote add origin https://github.com/lorenz-petra/FeNOgram.git





